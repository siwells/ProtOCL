
/*
 * @(#)Turn.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.LinkedHashSet;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;

/**
 *
 * @author unascribed
 */
public class Turn {

    
    public int getNumber() {

        return 0;

    }
    
    public final Set getMove() {

        if (move == null) {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(move);
    }
    
    public final void addMove(Move arg) {

        if (arg != null) {
            if (move == null) {
                move = new LinkedHashSet();
            }
            if (move.add(arg)) {
                arg.setTurn(this);
            }
        }

	ConstraintChecker checker=new ConstraintChecker();
        checker.checkConstraints();
    }
    
    public final void removeMove(Move arg) {

        if (move != null && arg != null) {
            if (move.remove(arg)) {
                arg.setTurn(null);
            }
        }

    }
    
    public final Player getPlayer() {

        return player;
    }
    
    public final void setPlayer(Player arg) {

        if (player != arg) {
            Player temp = player;
            player = null;//to avoid infinite recursions
            if (temp != null) {
                temp.removeTurn(this);
            }
            if (arg != null) {
                player = arg;
                arg.addTurn(this);
            }
        }

    }
    
    public Turn() {

    }
    
    public class ConstraintChecker extends BasicConstraintChecker {

        
        public void checkConstraints() {

            super.checkConstraints();
            check_Turn_invariant();

        }
        
        public void check_Turn_invariant() {

            Set setMove = Turn.this.getMove();
            int nSize = CollectionUtilities.size(setMove);
            boolean bEquals = nSize == 1;
            if (!bEquals) {
                System.err.println("invariant 'invariant' failed for object "+Turn.this);
            }

        }

    }
    
    public Set move;
    
    public Player player;
    
    private int number;

}
