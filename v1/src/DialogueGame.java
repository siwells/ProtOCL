
/*
 * @(#)DialogueGame.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Iterator;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;

/**
 *
 * @author unascribed
 */
public class DialogueGame {

    
    public String start() {

        
        class ConstraintChecker {

            
            String result;
            
            public void checkPreconditions() {

            }
            
            public void checkPostconditions() {

                check_postcondition();

            }
            
            public void check_postcondition() {

                Player playerProponent = DialogueGame.this.getProponent();
                CommitmentStore commitmentStoreStore = playerProponent.getStore();
                Set setContent = commitmentStoreStore.getContent();
                boolean bIsEmpty = CollectionUtilities.isEmpty(setContent);
                Player playerOpponent = DialogueGame.this.getOpponent();
                CommitmentStore commitmentStoreStore0 = playerOpponent.getStore();
                Set setContent0 = commitmentStoreStore0.getContent();
                boolean bIsEmpty0 = CollectionUtilities.isEmpty(setContent0);
                boolean bAnd = bIsEmpty && bIsEmpty0;
                if (!bAnd) {
                    System.err.println("postcondition 'postcondition' failed for object "+DialogueGame.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions();
        checker.result = internal_start();

        checker.checkPostconditions();
        return checker.result;

    }
    
    public String end() {

        
        class ConstraintChecker {

            
            String result;
            
            public void checkPreconditions() {

                check_precondition();

            }
            
            public void checkPostconditions() {

            }
            
            public void check_precondition() {

                Player playerProponent = DialogueGame.this.getProponent();
                CommitmentStore commitmentStoreStore = playerProponent.getStore();
                Set setContent = commitmentStoreStore.getContent();
                Proposition propositionThesis = DialogueGame.this.thesis;
                MoveContent moveContentGetNegation = propositionThesis.getNegation();
                boolean bIncludes = CollectionUtilities.includes(setContent, moveContentGetNegation);
                Player playerOpponent = DialogueGame.this.getOpponent();
                CommitmentStore commitmentStoreStore0 = playerOpponent.getStore();
                Set setContent0 = commitmentStoreStore0.getContent();
                Proposition propositionThesis0 = DialogueGame.this.thesis;
                boolean bIncludes0 = CollectionUtilities.includes(setContent0, propositionThesis0);
                boolean bOr = bIncludes || bIncludes0;
                if (!bOr) {
                    System.err.println("precondition 'precondition' failed for object "+DialogueGame.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions();
        checker.result = internal_end();

        checker.checkPostconditions();
        return checker.result;

    }
    
    public String play() {

        
        class ConstraintChecker {

            
            String result;
            
            public void checkPreconditions() {

                check_precondition();

            }
            
            public void checkPostconditions() {

            }
            
            public void check_precondition() {

                Player playerProponent = DialogueGame.this.getProponent();
                CommitmentStore commitmentStoreStore = playerProponent.getStore();
                Set setContent = commitmentStoreStore.getContent();
                Proposition propositionThesis = DialogueGame.this.thesis;
                MoveContent moveContentGetNegation = propositionThesis.getNegation();
                boolean bExcludes = CollectionUtilities.excludes(setContent, moveContentGetNegation);
                Player playerOpponent = DialogueGame.this.getOpponent();
                CommitmentStore commitmentStoreStore0 = playerOpponent.getStore();
                Set setContent0 = commitmentStoreStore0.getContent();
                Proposition propositionThesis0 = DialogueGame.this.thesis;
                boolean bExcludes0 = CollectionUtilities.excludes(setContent0, propositionThesis0);
                boolean bAnd = bExcludes && bExcludes0;
                if (!bAnd) {
                    System.err.println("precondition 'precondition' failed for object "+DialogueGame.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions();
        checker.result = internal_play();

        checker.checkPostconditions();
        return checker.result;

    }
    
    public Proposition getThesis() {

        return null;

    }
    
    public final DialogueHistory getHistory() {

        return history;
    }
    
    public final void setHistory(DialogueHistory arg) {

        history = arg;
    }
    
    public final Player getProponent() {

        return proponent;
    }
    
    public final void setProponent(Player arg) {

        proponent = arg;
    }
    
    public final Player getOpponent() {

        return opponent;
    }
    
    public final void setOpponent(Player arg) {

        opponent = arg;
    }
    
    private String internal_start() {

        return null;

    }
    
    private String internal_end() {

        return null;

    }
    
    private String internal_play() {

        return null;

    }
    
    public DialogueGame() {

    }
    
    public class ConstraintChecker extends BasicConstraintChecker {

        
        public void checkConstraints() {

            super.checkConstraints();
            check_DialogueGame_invariant();

        }
        
        public void check_DialogueGame_invariant() {

            Player playerProponent = DialogueGame.this.getProponent();
            Set setTurn = playerProponent.getTurn();
            //evaluate 'forAll(getNumber()/2=1)':
            boolean bForAll = true;
            final Iterator iter = setTurn.iterator();
            while (bForAll && iter.hasNext()) {
                final Turn iter1 = (Turn)iter.next();
                int nGetNumber = iter1.getNumber();
                float fDivide = nGetNumber / 2;
                boolean bEquals = fDivide == 1;
                
                bForAll = bEquals;
            }
            Player playerOpponent = DialogueGame.this.getOpponent();
            Set setTurn0 = playerOpponent.getTurn();
            //evaluate 'forAll(getNumber()/2=0)':
            boolean bForAll0 = true;
            final Iterator iter0 = setTurn0.iterator();
            while (bForAll0 && iter0.hasNext()) {
                final Turn iter1 = (Turn)iter0.next();
                int nGetNumber0 = iter1.getNumber();
                float fDivide0 = nGetNumber0 / 2;
                boolean bEquals0 = fDivide0 == 0;
                
                bForAll0 = bEquals0;
            }
            boolean bAnd = bForAll && bForAll0;
            if (!bAnd) {
                System.err.println("invariant 'invariant' failed for object "+DialogueGame.this);
            }

        }

    }
    
    public DialogueHistory history;
    
    public Player proponent;
    
    public Player opponent;
    
    private Proposition thesis;

}
